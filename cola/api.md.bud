## API

| File                                  | Description
|-------------------------------------- | -------------------------------------
| [`mulle_sprintf`](dox/API_SPRINTF.md) | The various sprintf like functions


### Format characters

For more detailed information on each characte consult a
[sprintf man page](https://manpages.org/sprintf).


### Flag Characters

Character | Description
----------|---------------
<tt>&nbsp;</tt> (SPC) | A blank should be left before a positive number.
`0`       | The value should be zero padded.
`#`       | The value should be converted to an "alternate form".
`-`       | The converted value is to be left adjusted on the field boundary.
`+`       | A sign  (+  or -) should always be placed before a number.
`'`       | Use thousands' grouping characters (UNUSED)
`b`       | BOOL, print as YES or NO (for Objective-C)


### Length modifier

Characters | Description
-----------|---------------
`h`        | `short`
`hh`       | `char`
`j`        | `intmax_t`
`l`        | `long`
`ll`       | `long long`
`L`        | `long double` (FP only)
`q`        | `int64.`
`t`        | `ptrdiff_t`
`z`        | `size_t`


### Conversion Specifiers (built in)

#### Integer

Character | Description
----------|---------------
`i`       | `int` as decimal
`d`       | `int` as decimal
`D`       | `long int`                   (compatibility)
`u`       | `unsigned int`
`o`       | `int` as octal
`x`       | `int` as lowercase hex
`U`       | `unsigned long int`          (compatibility)
`O`       | `unsigned long int` as octal (compatibility)
`X`       | `unsigned long int` as hex   (compatibility)

Used modifiers: all except `L`

#### Floating Point (FP)

Uppercase conversion specifiers output value such as 0e-20 or nan as
uppercase 0E-20 or NAN.

Character | Description
----------|---------------
`a`       | double as hex [-]0xh.hhhhp+-d
`e`       | double as [-]d.ddde+-dd
`f`       | double as [-]ddd.ddd  with lowercase for inf/nan
`g`       | double in `e` or `f`
`A`       | double as hex [-]0Xh.hhhhP+-d
`E`       | double as [-]d.dddE+-dd
`F`       | double as [-]d.ddde+-dd with uppercase for INF/NAN
`G`       | double in `E` or `F`

Used modifiers: `L`.

The actual conversion is done with the C-library `sprintf` function. This is
contrast with the other conversions, which are not using the C library.


#### Pointer / String / Other

Character | Description
----------|---------------
`n`       | return conversion
`p`       | void * as hex with 0x prefix
`s`       | char * as utf8
`S`       | utf16 / utf32 with `l` modifier


Used modifiers: `l`


